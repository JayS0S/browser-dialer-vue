.step(
  data-title='What Does This Thing Do?'
  data-file='index.js')
  :markdown
    ## What Does This Thing Do?

    This application allows you to make a call from your browser. It has the
    following main features:

    1. You can mute/unmute your audio.
    1. Send DTMF touch tones by pressing the key pad.

    This tutorial highlights the key bits of code that make this application
    work. [Check out the project README on GitHub](https://github.com/TwilioDevEd/browser-dialer-vue)
    to see how to run the code yourself.

    Let's get started.

    ---

    **See also:**

    - [Dual-Tone Multi-Frequency Signaling](//en.wikipedia.org/wiki/Dual-tone_multi-frequency_signaling)

.step(
  data-title='Generate a Capability Token'
  data-file='index.js',
  data-highlight='13-25')
  :markdown
    ## Generate a Capability Token

    The Twilio.js Client requires a capability token in order to work. The
    capability token grant privileges to our browser to make an outbound call.

    We use the [Twilio Node Helper Library](//www.twilio.com/docs/libraries/node)
    to generate and configure a capability token with the SID of a Twilio
    Application to allow outgoing calls.

    ---

    **See also:**
    - [Twilio Client: Capability Tokens](//www.twilio.com/docs/api/client/capability-tokens)
    - [Capability Tokens: Allow Outgoing Connections](//www.twilio.com/docs/api/client/capability-tokens#allow-outgoing-connections)

.step(
  data-title='Set Up the Twilio Device'
  data-file='public/dialer.js',
  data-highlight='35-42, 50-52')
  :markdown
    ## Set Up the Twilio Device

    First of all, we have to [include the Twilio.js library](//www.twilio.com/docs/api/client/twilio-js#including-js).

    We retrieve the capability token from the route **/token** with a POST
    request. The token is required to initialize the `Twilio.Device`. It will
    activate the device granting privileges to make an outbound call. The
    initialization is done by passing the capability token to
    `Twilio.Device.setup`.

    The `Twilio.Device.ready` callback is used to notify when the device is
    ready to make calls.

    ---

    **See also:**
    - [Twilio.Device.setup](//www.twilio.com/docs/api/client/device#setup)
    - [Twilio.Device.ready](//www.twilio.com/docs/api/client/device#ready)

.step(
  data-title='Make a Call'
  data-file='public/dialer.js',
  data-highlight='80-82')
  :markdown
    ## Make a Call

    We have to build the phone number. It requires a **+** sign, then a
    country code and the actual number.

    We use `Twilio.Device.connect` to make an call. In this
    implementation we pass the phone number as a parameter to the Twilio
    application associated with this device's capability token.

    ---

    **See also:**
    - [Twilio.Device.connect](//www.twilio.com/docs/api/client/device#connect)

.step(
  data-title='Mute and Unmute an Active Call'
  data-file='public/dialer.js',
  data-highlight='68-72')
  :markdown
    ## Mute and Unmute an Active Call

    Sometimes you want to _mute or unmute_ the current call, let's take a look at
    how to implement it.

    We have to get the active connection object (`Twilio.Connection`), this
    object represents a call to or from Twilio.

    To get this object we can rely on `Twilio.Device.activeConnection`. Once we
    have it we can use the `mute` method to _mute or unmute_ the active call.

    ---

    **See also:**
    - [Twilio.Device.activeConnection](//www.twilio.com/docs/api/client/device#activeconnection)
    - [Twilio.Connection.mute](//www.twilio.com/docs/api/client/connection#mute)

.step(
  data-title='Send DTMF Tones'
  data-file='public/dialer.js',
  data-highlight='90-93')
  :markdown
    ## Send DTMF Tones

    DTMF stands for "Dual-tone multi-frequency signaling" and are the familiar
    sounds you hear when dialing a phone. DTMF have been standardized so that
    they can be understood and decoded by machines.

    To play DTMF tones with the Twilio.js client library we can make use of
    `sendDigits`, this method plays DTMF tones depending on the parameter you
    pass to it.

    ---
    **See also:**
    - [Twilio.Connection.sendDigits](//www.twilio.com/docs/api/client/connection#sendDigits)
    - [Interactive Voice Response](//en.wikipedia.org/wiki/Interactive_voice_response)

.step(
  data-title='Hang up the Call'
  data-file='public/dialer.js',
  data-highlight='85-86')
  :markdown
    ## Hang up the Call

    We're about to finish this tutorial. The last step is to learn how to hang
    up an active call.

    To achive this we use `Twilio.Device.disconnectAll` which terminates the
    current call.

    ---
    **See also:**
    - [Twilio.Device.disconnectAll](https://www.twilio.com/docs/api/client/device#disconnect-all)

.step(data-title='Where to Next?')
  :markdown
    ## Where to Next?

    That's it! We crafted an application that allows us to make
    browser-to-phone calls using Twilio.js

    Thanks for checking out this tutorial ! If you have any feedback to share
    with us, we'd love to hear it. [Contact the Twilio Developer Education
    Team](mailto:deved-oss@twilio.com) to let us know what you think.
